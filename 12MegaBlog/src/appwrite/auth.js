import conf from '../conf/conf';
import { Client, Account, ID } from "appwrite";


class AuthService {
    client = new Client();
    account;

    constructor() {
        this.client
            .setEndpoint(conf.appwriteUrl)
            .setProject(conf.appwriteProjectId);

        this.account = new Account(this.client)
    }

    async createAccount({email, password, name}) { // A function always returns a promise OR async ensures that the function returns a promise, and wraps non-promise in it
        try {
            await this.account.create(ID.unique(), email, password, name); // The keyword await makes JavaScript wait until that promise settles and returns its result.
                                                                            // await literally suspends the function execution until the promise settles, and then resumes it with the promise result. That doesnâ€™t cost any CPU resources, because the JavaScript engine can do other jobs in the meantime: execute other scripts, handle events, etc.
                                                                            //the asynchronous nature of the await keyword allows other code to continue executing.
                } catch (error) {
            throw error;
        }
    }

    async login({email, password}) {
        try {
            return await this.account.createEmailSession(email, password);
        } catch (error) {
            throw error;
        }
    }

    async getCurrentUser() {
        try {
            return await this.account.get();
        } catch (error) {
            console.log("Appwrite service :: getCurrentUser :: error", error)
        }

        return null
    }

    async logout() {
        try {
            await this.account.deleteSessions()
        } catch (error) {
            console.log("Appwrite service :: logout :: error", error)
        }
    }
}

const authService = new AuthService();

export default authService